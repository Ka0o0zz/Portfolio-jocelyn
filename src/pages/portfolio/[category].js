import { persons, objects, food, animals } from "@/images";
import useAppContext from "@/useContext";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useCallback, useEffect, useState } from "react";
import { LazyLoadImage } from "react-lazy-load-image-component";

const libraryNumPhotos = {
  persons: 8,
  objects: 6,
  food: 2,
  animals: 2,
};

const libraryCategory = {
  persons: persons,
  objects: objects,
  food: food,
  animals: animals,
};

export default function DetailCategory() {
  const [photoNum, setPhotoNum] = useState(0);
  const [keyPressed, setKeyPressed] = useState(false);
  const [imageUrl, setImageUrl] = useState([]);
  const router = useRouter();
  const { category } = router.query;
  const { animation, setAnimation } = useAppContext();

  useEffect(() => {
    if (!animation) {
      setAnimation(true);
    }
  }, [animation, setAnimation]);

  useEffect(() => {
    setImageUrl(libraryCategory[category]);
  }, [category]);

  const handleClick = useCallback(
    (action) => {
      if (action === "down") {
        if (photoNum === 0) {
          setPhotoNum(libraryNumPhotos[category]);
          return;
        }
        setPhotoNum(photoNum - 1);
        return;
      }

      if (photoNum >= libraryNumPhotos[category]) {
        setPhotoNum(0);
        return;
      }

      setPhotoNum(photoNum + 1);
      return;
    },
    [photoNum, category]
  );

  useEffect(() => {
    const handleKeyDown = (action) => {
      if (keyPressed) {
        return;
      }
      const { code } = action;

      setKeyPressed(true);

      if (code === "ArrowRight") {
        handleClick("up");
      }
      if (code === "ArrowLeft") {
        handleClick("down");
      }
      if (code === "Escape") {
        router.push("/portfolio");
      }

      setTimeout(() => {
        setKeyPressed(false);
      }, 100);
    };
    document.addEventListener("keydown", handleKeyDown);

    return () => {
      document.addEventListener("keydown", handleKeyDown);
    };
  }, [handleClick, keyPressed, router]);

  return (
    <>
      <Head>
        <title>Joselin Vargas | Portfolio</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="photo-detail-container">
        <div className="header-photo-detail">
          <Link href={"/"}>
            <h3>Joselin Vargas</h3>
          </Link>

          <Link href={"/"}>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="icon icon-tabler icon-tabler-x"
              width="28"
              height="28"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="#000000"
              fill="none"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <line x1="18" y1="6" x2="6" y2="18" />
              <line x1="6" y1="6" x2="18" y2="18" />
            </svg>
          </Link>
        </div>
        <div className="photo-detail">
          <button onClick={() => handleClick("down")}>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="currentColor"
              stroke="none"
              width="15"
              height="27"
              viewBox="0 0 15 27"
            >
              <g fillRule="evenodd">
                <path
                  fillRule="nonzero"
                  d="M14.258 1.53L13.198.47-.061 13.728l13.259 13.258 1.06-1.06L2.061 13.728z"
                ></path>
              </g>
            </svg>
          </button>
          <div className="photo-detail-img">
            <LazyLoadImage
              alt={"photos of joselin portfolio"}
              src={imageUrl?.[photoNum]?.src}
            />
          </div>
          <button onClick={() => handleClick("up")}>
            <svg
              fill="currentColor"
              stroke="none"
              width="15"
              height="27"
              viewBox="0 0 15 27"
            >
              <g fillRule="evenodd">
                <path
                  fillRule="nonzero"
                  d="M.198 25.926l1.06 1.06 13.259-13.258L1.258.47.198 1.53l12.197 12.198z"
                ></path>
              </g>
            </svg>
          </button>
        </div>
      </div>
    </>
  );
}
